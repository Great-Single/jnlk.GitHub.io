{"pages":[{"title":"about","text":"测试页面。","link":"/about/index.html"}],"posts":[{"title":"First Post - 利用 hexo 博客系统结合 Coding Pages 创建个人博客","text":"Hello World! 这是我在博客中写下的第一句话，我想，这应该是我第一篇关于应用方面的正式教程。 利用 Coding Pages 配合 hexo 框架搭建博客，好处有这么几条： 可以很方便地配合 Coding 的 Cloud Studio 服务； 访问速度快，且有腾讯云支持，自定义功能更高，且备案等流程更为便捷； 无需自建服务器，且能轻松进行自动化构建。 在 Coding 中快速搭建 hexo 个人博客Coding 静态网站部署原名为 Coding Pages，和 Github 上的“Github Pages”差不多一样。 而 hexo 则是一款基于 Node.js 的静态博客框架，且使用 Markdown 解析文章。 两者结合使用十分简单，而且方便配置。 下面，教程开始。 步骤一：创建 CODING 项目 在 Coding 中新建项目； 选择并创建 DevOps 项目； 填写项目名称后，点击 完成创建 按钮，即可完成项目创建。 步骤二：创建静态网站 进入项目面板以后，在左侧栏找到 持续部署 - 静态网站。 注意，首次使用 Coding 的静态网站服务是需要进行实名验证的，并且要在腾讯云后台进行一些操作。 点击 新建静态网站，进入表单，选择如图所示，当然了，网站名称自己随便填写就可以了。部署的节点可以选择香港，海外网站无需备案。 表单填写完成后点击 确定 即可提交。 步骤三：等待部署 创建成功后，耐心等待静态网站部署完成，状态会由 部署中 变为 部署成功。 部署成功以后，Coding 静态网站自动给你一个 访问地址，复制粘贴到链接栏即可访问。至此，部署的流程全部完成。","link":"/2021/02/14/First-Post-%E5%88%A9%E7%94%A8-hexo-%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E7%BB%93%E5%90%88-Coding-Pages-%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"title":"npm 在安装的时候提示 没有权限操作的解决办法 Error EACCES permission denied","text":"在安装插件的时候出现这样的错误，权限不够，是因为之前用 root 用户进行了局部安装npm包的操作，留下所属权为 root 的文件，导致普通用户无法访问 root的文件内容。 报错日志如下： 1234567891011121314151617181920212223242526272829303132npm ERR! path /Users/Kyle/.npm/_cacache/index-v5/d8/1f/98ab242d0cbad080828ef3e3f4b864c25e506a719121c293fec810b14b3cnpm ERR! code EACCESnpm ERR! errno -13npm ERR! syscall opennpm ERR! Error: EACCES: permission denied, open '/Users/Kyle/.npm/_cacache/index-v5/d8/1f/98ab242d0cbad080828ef3e3f4b864c25e506a719121c293fec810b14b3c'npm ERR! { [Error: EACCES: permission denied, open '/Users/Kyle/.npm/_cacache/index-v5/d8/1f/98ab242d0cbad080828ef3e3f4b864c25e506a719121c293fec810b14b3c']npm ERR! cause:npm ERR! { Error: EACCES: permission denied, open '/Users/Kyle/.npm/_cacache/index-v5/d8/1f/98ab242d0cbad080828ef3e3f4b864c25e506a719121c293fec810b14b3c'npm ERR! errno: -13,npm ERR! code: 'EACCES',npm ERR! syscall: 'open',npm ERR! path:npm ERR! '/Users/Kyle/.npm/_cacache/index-v5/d8/1f/98ab242d0cbad080828ef3e3f4b864c25e506a719121c293fec810b14b3c' },npm ERR! isOperational: true,npm ERR! stack:npm ERR! 'Error: EACCES: permission denied, open \\'/Users/Kyle/.npm/_cacache/index-v5/d8/1f/98ab242d0cbad080828ef3e3f4b864c25e506a719121c293fec810b14b3c\\'',npm ERR! errno: -13,npm ERR! code: 'EACCES',npm ERR! syscall: 'open',npm ERR! path:npm ERR! '/Users/Kyle/.npm/_cacache/index-v5/d8/1f/98ab242d0cbad080828ef3e3f4b864c25e506a719121c293fec810b14b3c',npm ERR! parent: 'findup-sync' }npm ERR! npm ERR! The operation was rejected by your operating system.npm ERR! It is likely you do not have the permissions to access this file as the current usernpm ERR! npm ERR! If you believe this might be a permissions issue, please double-check thenpm ERR! permissions of the file and its containing directories, or try runningnpm ERR! the command again as root/Administrator (though this is not recommended).npm ERR! A complete log of this run can be found in:npm ERR! /Users/Kyle/.npm/_logs/2019-03-26T07_00_54_812Z-debug.log 错误原因：找到报错的文件，会看到它的所有者是 root。之前用 root 进行了局部的安装操作，导致这个文件的所有者是 root ，还包括 .npm 文件夹下部分文件夹的所有权，也是 root，普通用户当然就无权访问了。就会报权限错误。 解决办法就是把用户目录下的 .npm 文件夹所有权都改成当前用户即可。比如：当前用户名为 Kyle 1sudo chown -R Kyle ~/.npm 执行后输入 root 密码，文件所属已改为当前用户了，再执行操作就不会出现了。 注意事项初学者在用 terminal 操作 npm 的时候，经常会混用 root 和 普通用户。由于分不清全局安装和局部安装的区别，才会出现乱用 root 的问题。 一般来说，全局安装就用 root 安装。局部安装就用普通用户。 原文链接：https://blog.csdn.net/kimbing/article/details/88821182","link":"/2021/02/14/npm-%E5%9C%A8%E5%AE%89%E8%A3%85%E7%9A%84%E6%97%B6%E5%80%99%E6%8F%90%E7%A4%BA-%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E6%93%8D%E4%BD%9C%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95-Error-EACCES-permission-denied/"},{"title":"npm 速度过慢的解决方案","text":"因为npm连接的数据源网站太慢，可以使用淘宝提供的npm数据源， 1npm config set registry https://registry.npm.taobao.org 使用NPM（Node.js包管理工具）安装依赖时速度特别慢，为了安装Express，执行命令后两个多小时都没安装成功，最后只能取消安装，笔者20M带宽，应该不是我网络的原因，后来在网上找了好久才找到一种最佳解决办法，在安装时可以手动指定从哪个镜像服务器获取资源，我们可以使用阿里巴巴在国内的镜像服务器，命令如下： 1npm install -gd express --registry=http://registry.npm.taobao.org 只需要使用–registry参数指定镜像服务器地址，为了避免每次安装都需要--registry参数，可以使用如下命令进行永久设置： 1npm config set registry http:/bash 1换了国内镜像，安装速度就很快了。 1npm install cnpm -g 或者 1npm install cnpm -g --registry=https://registry.npm.taobao.org 应该都是可以的额。cnpm安装后，直接用cnpm解决被墙的问题。或者直接配置registry为淘宝的registry,后面还是使用npm 来源网址：https://www.cnblogs.com/sddai/p/9388261.html","link":"/2021/02/14/npm-%E9%80%9F%E5%BA%A6%E8%BF%87%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"title":"使用 PicGo 上传图片到 SM.MS 图床","text":"昨天，轻狂测试了一下使用 PicGo+GitHub 打造最稳定可靠的免费图床，但是由于众所周知的原因，GitHub在国内的访问速度有点慢，可能会影响页面的加载速度。那么，今天轻狂就来试试 SM.MS 图床。 一、SM.MS 图床 其实轻狂之前就注册了 SM.MS 图床，只是测试了一下速度，并没有正式使用，注册账号我就不多说了，自己去 SM.MS 上注册就行了，地址：https://sm.ms/ 登录之后，我们要到 https://sm.ms/home/apitoken 生成一个 Secret Token 以备后用。 二、PicGo 设置 到 PicGo-插件设置里面搜索一个插件：picgo-plugin-smms-user，点击安装。 注意：安装这个插件需要用到 Node.js，没有安装的小伙伴要先安装一下，地址：https://nodejs.org/zh-cn 点击图床设置-SM.MS-登录用户（不是那个SM.MS图床，那个接口已经失效了），把上面我们申请到的 Secret Token 填写进去点击 确定 保存，设为默认图床即可体验啦。 总结：经过测试，目前我用的网络环境下，SM.MS图床，要比 Github 速度快一些。 原文链接：https://www.flighty.cn/html/tutorial/20200218_579.html","link":"/2021/02/14/%E4%BD%BF%E7%94%A8-PicGo-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0-SM-MS-%E5%9B%BE%E5%BA%8A/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"原创","slug":"原创","link":"/tags/%E5%8E%9F%E5%88%9B/"},{"name":"NPM","slug":"NPM","link":"/tags/NPM/"},{"name":"转载","slug":"转载","link":"/tags/%E8%BD%AC%E8%BD%BD/"}],"categories":[{"name":"行动记录","slug":"行动记录","link":"/categories/%E8%A1%8C%E5%8A%A8%E8%AE%B0%E5%BD%95/"},{"name":"问题记录","slug":"问题记录","link":"/categories/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"}]}